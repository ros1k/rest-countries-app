// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { fetchCount } from './counterAPI';
import {
  createSlice,
  createAsyncThunk,

} from '@reduxjs/toolkit'

const ApiUrl = 'https://restcountries.com/v3.1/all'

export const fetchCountries = createAsyncThunk(
  'countries/fetchAllCountries',
  async () => {
    const response = await fetch(ApiUrl).then(resp => resp.json());

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const countriesSlice = createSlice({
  name: 'countries',
  initialState: {
    loading: 'idle',
    countries: [],
    error: false
  },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

    loadCountries(state, action) {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      if (state.loading === 'idle') {
        state.loading = 'pending'
      }
    },

  },
  // // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
  extraReducers: {
    [fetchCountries.fulfilled]: (state, action) => {
      state.loading = 'finished'

      state.countries = action.payload;
    },
    [fetchCountries.pending]: (state, { meta }) => {
      state.loading = "loading";
    },
    [fetchCountries.rejected]: (state, { meta, payload, error }) => {
      state.error = error;
    },
  }
});

export const { loadCountries } = countriesSlice.actions;


export default countriesSlice.reducer;

